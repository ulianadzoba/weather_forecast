{"version":3,"sources":["components/CityName/CityName.js","components/TempRange/TempRange.js","components/Info/Info.js","components/SkyCondition/SkyCondition.js","components/CurrentTemp/CurrentTemp.js","components/CurrentWeather/CurrentWeather.js","components/DayForecast/DayForecast.js","components/EachHourComponent/EachHourComponent.js","components/DayHours/DayHours.js","components/WeekForecast/WeekForecast.js","App.js","serviceWorker.js","index.js"],"names":["CityName","state","className","this","props","name","Component","TempRange","minTemp","maxTemp","toFixed","Info","humidityValue","date","day","Date","toLocaleDateString","getWeekDay","windSpeed","SkyCondition","iconState","description","src","alt","CurrentTemp","avgTemp","CurrentWeather","main","temp_min","temp_max","humidity","temp","weather","icon","cityName","wind","DayForecast","path","to","slice","EachHourComponent","getGoodHour","dt","goodHour","getHours","hour","DayHours","weatherData","map","key","WeekForecast","midi","hoursTime","i","ggg","push","setHours","hours","hoursForecast","filter","item","includes","forecast","console","log","getHoursForecast","from","App","Array","getDay","getWeather","fetch","city","then","response","json","setState","fetching","catch","error","getForecast","nextDays","today","nextDay","setDate","getDate","list","forecastIsLoading","event","target","value","preventDefault","componentDidMount","class","onSubmit","selectCity","bind","type","onChange","enterCity","speed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ea3d65a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './CityName.scss';\r\n\r\nclass CityName extends Component {\r\n    state = {}\r\n    render() {\r\n        return (\r\n            <div className=\"city-name\">\r\n                {this.props.name}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CityName;","import React, { Component } from 'react';\r\nimport './TempRange.scss';\r\n\r\nclass TempRange extends Component {\r\n    state = {}\r\n\r\n    render() {\r\n        let { minTemp, maxTemp } = this.props;\r\n        minTemp = (minTemp - 273.15).toFixed(0);\r\n        maxTemp = (maxTemp - 273.15).toFixed(0);\r\n\r\n        return (\r\n            <div className=\"city-temperature\">\r\n                <div className=\"arrow\"><i className=\"fas fa-long-arrow-alt-down\"></i></div>\r\n                <div className=\"temp\">{minTemp}&deg;</div>\r\n                <div className=\"arrow\"><i className=\"fas fa-long-arrow-alt-up\"></i></div>\r\n                <div className=\"temp\">{maxTemp}&deg;</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TempRange;","import React, { Component } from 'react';\r\nimport './Info.scss';\r\n\r\nclass Info extends Component {\r\n    state = {}\r\n\r\n    render() {\r\n\r\n        let { humidityValue, date } = this.props;\r\n        // console.log(date);\r\n        date = new Date(date * 1000);\r\n        let day = date.toLocaleDateString();\r\n\r\n        return (\r\n            <div className=\"info\">\r\n                <div className=\"day-name\">{this.props.getWeekDay(date)}</div>\r\n                <div className=\"date\">{day}</div>\r\n                <div className=\"wind\">Wind {this.props.windSpeed} km/h</div>\r\n                <div className=\"humidity\">\r\n                    <div className=\"humidity-icon\"><i className=\"fas fa-tint\"></i></div>\r\n                    <div className=\"humidity-value\">{humidityValue}&#37;</div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Info;","import React, { Component } from 'react';\r\nimport './SkyCondition.scss';\r\n\r\nclass SkyCondition extends Component {\r\n    state = {}\r\n    render() {\r\n        let { iconState, description } = this.props;\r\n\r\n\r\n        return (\r\n            <div className=\"weather-img\">\r\n                <div>\r\n                    <img className=\"weather-icon\" src={`http://openweathermap.org/img/wn/${iconState}.png`} alt='sky'></img>\r\n                </div>\r\n                <div className=\"weather-description\">\r\n                    {description}\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default SkyCondition;","import React, { Component } from 'react';\r\nimport './CurrentTemp.scss';\r\n\r\nclass CurrentTemp extends Component {\r\n    state = {}\r\n    render() {\r\n        let { avgTemp } = this.props;\r\n        avgTemp = (avgTemp - 273.15).toFixed(0);\r\n        return (\r\n            <div className=\"weather-temp\">\r\n                {avgTemp} &deg;\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CurrentTemp;","import React, { Component } from 'react';\r\nimport CityName from '../CityName/CityName';\r\nimport TempRange from '../TempRange/TempRange';\r\nimport Info from '../Info/Info';\r\nimport SkyCondition from '../SkyCondition/SkyCondition';\r\nimport CurrentTemp from '../CurrentTemp/CurrentTemp';\r\nimport { BrowserRouter, Router } from 'react-router-dom';\r\n\r\n\r\nclass CurrentWeather extends Component {\r\n    state = {}\r\n\r\n    render() {\r\n        let { temp_min, temp_max, humidity, temp } = this.props.main;\r\n        let { icon, description } = this.props.weather;\r\n\r\n        return (\r\n            <div className=\"today-forecast weather\">\r\n                <div className=\"row\">\r\n                    <CityName name={this.props.cityName} />\r\n                    <TempRange minTemp={temp_min} maxTemp={temp_max} />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <Info windSpeed={this.props.wind} humidityValue={humidity} date={this.props.date} getWeekDay={this.props.getWeekDay} />\r\n                    <SkyCondition iconState={icon} description={description} />\r\n                    <CurrentTemp avgTemp={temp} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CurrentWeather;","import React, { Component } from 'react';\r\nimport './DayForecast.scss';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass DayForecast extends Component {\r\n    state = {}\r\n    render() {\r\n        let { day, icon, temp, path } = this.props;\r\n        return (\r\n            <NavLink to={`/${path}`} className='week-icon'>\r\n                <div className=\"day\">\r\n                    <div className=\"week-day\">{day.slice(0, 3)}</div>\r\n                    <div className=\"week-icon\">\r\n                        <img src={`http://openweathermap.org/img/wn/${icon}.png`} alt='sky'></img>\r\n                    </div>\r\n                    <div className=\"week-temp\">{(temp - 273.15).toFixed(0)}&deg;</div>\r\n                </div >\r\n            </NavLink>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayForecast;","import React, { Component } from 'react';\r\n\r\nclass EachHourComponent extends Component {\r\n    state = {}\r\n    getGoodHour = (dt) => {\r\n        let goodHour = new Date(dt * 1000);\r\n        goodHour = goodHour.getHours();\r\n        return goodHour;\r\n    }\r\n    render() {\r\n        let goodHour = this.getGoodHour(this.props.hour);\r\n        return (\r\n            <div className='hoursForecast'>\r\n                <div className='hourName'>{goodHour - 2}:00</div>\r\n                <div className='hourIcon'>\r\n                    <img src={`http://openweathermap.org/img/wn/${this.props.icon}.png`} alt='sky'></img>\r\n                </div>\r\n                <div className='hourTemp'>{(this.props.temp - 273.15).toFixed(1)}&deg;</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EachHourComponent;","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport EachHourComponent from '../EachHourComponent/EachHourComponent';\r\nimport './DayHours.scss';\r\n\r\nclass DayHours extends Component {\r\n    state = {}\r\n    render() {\r\n        return (\r\n            <NavLink to='/home/'>\r\n                <div className='weather'>\r\n                    <div className='day-title'>{this.props.day}</div>\r\n                    <div className='hours-forecast'>\r\n                        {this.props.weatherData.map(hour => {\r\n                            return (\r\n                                <div>\r\n                                    <EachHourComponent hour={hour.dt} temp={hour.main.temp} icon={hour.weather[0].icon} key={hour.dt} />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </NavLink>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayHours;","import React, { Component } from 'react';\r\nimport DayForecast from '../DayForecast/DayForecast';\r\nimport './WeekForecast.scss';\r\nimport { BrowserRouter, Route, Redirect, NavLink } from 'react-router-dom';\r\nimport DayHours from '../DayHours/DayHours';\r\n\r\nclass WeekForecast extends Component {\r\n    state = {}\r\n\r\n    getHours = (midi) => {\r\n        let hoursTime = [];\r\n        for (let i = 8; i < 23; i = i + 3) {\r\n            let ggg = new Date(midi);\r\n            hoursTime.push(ggg.setHours(i, 0, 0, 0) / 1000);\r\n        }\r\n        return hoursTime;\r\n    }\r\n\r\n\r\n    getHoursForecast(dt) {\r\n        let hours = this.getHours(dt);\r\n        let hoursForecast = this.props.hoursForecast.filter(item => {\r\n            if (hours.includes(item.dt)) {\r\n                return item;\r\n            }\r\n        })\r\n        return hoursForecast;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <BrowserRouter>\r\n\r\n                <div className=\"week-forecast weather\">\r\n                    {this.props.forecast.map(day => {\r\n                        let date = new Date(day.dt * 1000);\r\n                        return (<DayForecast day={this.props.getWeekDay(date)} temp={day.main.temp} icon={day.weather[0].icon} key={day.dt} path={day.dt} />)\r\n                    })}\r\n                </div>\r\n                {this.props.forecast.map(day => {\r\n                    let date = new Date(day.dt * 1000);\r\n\r\n                    console.log(this.getHoursForecast(day.dt * 1000));\r\n                    return (\r\n                        <Route path={`/${day.dt}`}><DayHours day={this.props.getWeekDay(date)} weatherData={this.getHoursForecast(day.dt * 1000)} /></Route>\r\n                    )\r\n                })}\r\n\r\n                <Redirect from='/' to='home' />\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeekForecast;","import React, { Component } from 'react';\nimport './App.scss';\nimport CurrentWeather from './components/CurrentWeather/CurrentWeather';\nimport WeekForecast from './components/WeekForecast/WeekForecast';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.forecast = { list: [] };\n    this.state = {\n      weather: {},\n      fetching: true,\n      forecastIsLoading: true,\n      forecast: [],\n      city: 'Ivano-Frankivsk'\n    };\n  }\n\n  componentDidMount() {\n    this.getForecast();\n    this.getWeather();\n  }\n\n  enterCity(event) {\n    this.setState({ city: event.target.value });\n  }\n\n  selectCity(event) {\n    event.preventDefault();\n    this.componentDidMount();\n  }\n\n  // getFilteredForecast = (forecast) => {\n  //   let nextDays = [];\n  //   for (let i = 1; i < 6; i++) {\n  //     let today = new Date();\n  //     let nextDay = new Date(today);\n  //     nextDay.setDate(nextDay.getDate() + i);\n  //     nextDays.push(nextDay.setHours(14, 0, 0, 0) / 1000);\n  //   };\n\n  //   forecast = forecast.list.filter(item => {\n  //     if (nextDays.includes(item.dt)) {\n  //       return item;\n  //     }\n  //   })\n  //   // console.log(forecast);\n  //   this.setState({ forecast });\n  //   this.setState({ forecastIsLoading: false });\n  // }\n\n  getWeekDay = (date) => {\n    let weekdays = new Array(\n      \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n    );\n    let day = date.getDay();\n    return weekdays[day];\n  }\n\n  getWeather = () => {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=0eddcdb661df2306a90562e7f597877a`)\n      .then(response => response.json())\n      .then(weather => {\n        this.setState({ weather });\n        this.setState({ fetching: false });\n      })\n      .catch(error => console.log('Error:', error))\n  }\n\n  getForecast = () => {\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.state.city}&appid=0eddcdb661df2306a90562e7f597877a`)\n      .then(response => response.json())\n      .then(forecast => {\n        this.forecast = forecast;\n        let nextDays = [];\n        for (let i = 1; i < 6; i++) {\n          let today = new Date();\n          let nextDay = new Date(today);\n          nextDay.setDate(nextDay.getDate() + i);\n          nextDays.push(nextDay.setHours(14, 0, 0, 0) / 1000);\n        };\n        console.log(nextDays);\n        forecast = forecast.list.filter(item => {\n          if (nextDays.includes(item.dt)) {\n            return item;\n          }\n        })\n        console.log(forecast);\n        this.setState({ forecast });\n        this.setState({ forecastIsLoading: false });\n      })\n      .catch(error => console.log('Error:', error))\n  }\n\n  render() {\n    const { weather, fetching, forecastIsLoading, forecast } = this.state;\n    return (\n      (fetching && forecastIsLoading) ? (\n        <section className='forecast'>\n          <div className='forecast-title'>\n            - Weather loaded -\n          </div>\n        </section>\n      ) : (\n          < section className='forecast' >\n            <div className='forecast-title'>\n              - Weather forecast -\n            </div>\n            <div className='selectCity'>\n              <div class='select-title '>Choose your city:</div>\n              <form onSubmit={this.selectCity.bind(this)}>\n                <input className='input' type='text' onChange={this.enterCity.bind(this)} value={this.state.city} />\n                <input className='button' type=\"submit\" value=\"Select\" />\n              </form>\n            </div>\n            <CurrentWeather getWeekDay={this.getWeekDay} cityName={weather.name} main={weather.main} wind={weather.wind.speed} weather={weather.weather[0]} date={weather.dt} />\n            <WeekForecast forecast={forecast} getWeekDay={this.getWeekDay} hoursForecast={this.forecast.list} />\n          </section >\n        )\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}